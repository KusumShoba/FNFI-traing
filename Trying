@page "/userdashboard/{PolicyHolderId:int}"
@using ClientApp.Services
@using InsuranceApi.DTOs
@inject IPolicyHolderDtoService PolicyHolderService
@inject NavigationManager NavigateManager

<div class="profile-page">
    <header class="hero">
        <div class="hero-content">
            <h1 class="title">Welcome, @UserName!</h1>
            <p class="subtitle">Your Profile Dashboard</p>
        </div>
    </header>

    <main class="content">
        <section class="user-info">
            <div class="card">
                <h2 class="card-title">User Information</h2>
                <ul class="info-list">
                    <li><span class="icon-user"></span><strong>Name:</strong> @UserName</li>
                    <li><span class="icon-location-pin"></span><strong>Address:</strong> @Address</li>
                    <li><span class="icon-phone"></span><strong>Phone:</strong> @Phone</li>
                    <li><span class="icon-email"></span><strong>Email:</strong> @Email</li>
                    <li><span class="icon-status"></span><strong>Status:</strong> @Status</li>
                </ul>
            </div>
        </section>


        <div class="claims-section">
            <div class="dropdown-header">
                <button @onclick="() => NavigateToClaimStatus(policyHolderId)"><h3>Your Policies</h3></button>
            </div>
        </div>


        <div class="claims-section">
            <div class="dropdown-header">
                <button @onclick="() => NavigateToClaimStatus(policyHolderId)"><h3>Your Claims</h3></button>
            </div>
        </div>
        
    </main>

    
</div>




@code {
    [Parameter]
    public int policyHolderId { get; set; }
    private string UserName;
    private string Address;
    private string Phone;
    private string Email;
    private int Status;
    private List<PolicyHolderDto> Policies;

    protected override async Task OnInitializedAsync()
    {
        // Example to fetch data dynamically based on user context or session

        // Fetch the policy holder data by ID
        var policyHolder = await PolicyHolderService.GetById(policyHolderId);


        if (policyHolder != null)
        {
            // Assign the fetched data to the fields
            UserName = policyHolder.Name;
            Address = policyHolder.Address;
            Phone = policyHolder.Phone;
            Email = policyHolder.Email;
            Status = policyHolder.Status;

            // Fetch all policies for this user
            Policies = await PolicyHolderService.GetAll();
        }
    }

    private void NavigateToClaimStatus(int policyHolderId)
    {
        NavigateManager.NavigateTo($"/Claim/{policyHolderId}");//Put 8
    }
}


<div>
    <style>

        .user-header {
            background-color: royalblue;
            color: white;
            padding: 15px;
            text-align: center;
            border-radius: 5px;
        }

        .info-card, .claims-card, .policy-card, .summary-card, .recent-activities {
            background-color: white;
            border-radius: 5px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            margin-top: 15px;
            margin-bottom: 15px;
        }

        h3 {
            color: #333;
            margin-bottom: 15px;
            display: inline-block;
        }

        p, li {
            color: #555;
            margin: 5px 0;
        }

        .dropdown-header {
            cursor: pointer;
            background-color: #e0e0e0;
            padding: 10px;
            border-radius: 5px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            transition: background-color 0.3s ease;
        }

            .dropdown-header:hover {
                background-color: skyblue;
            }

        .recent-activities ul {
            padding-left: 20px;
        }

        .recent-activities li {
            margin-bottom: 10px;
        }
    </style>
</div>

@page "/Claim/{policyHolderId:int}"
@using ClientApp.Services
@using InsuranceApi.DTOs


@inject IClaimDtoService ClaimService

@inject IInsuredDtoService InsuredService

@inject IPolicyDtoService PolicyService
@inject IInsuranceTypeDtoService InsuranceTypeService

@inject IInsuredPolicyDtoService InsurancePolicy



<h3>Claim Status</h3>

@if (claim == null)
{
    <p>Loading claims...</p>
}


else
{
    <table class="table">
        <thead>
            <tr>
                <th>ClaimId</th>
                <th>Insurance ID</th>
                <th>Policy Holder ID</th>
                <th>Claim Date</th>
                <th>Claim Amount</th>
                <th>Claim Status</th>
                <th>Dispense Amount</th>
                <th>Dispense Type</th>
                <th>Dispense Path</th>
                <th>Hospital ID</th>
                <td>Name</td>
                <td>Plan</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                    <td>@claim.ClaimId</td>
                    <td>@claim.InsuredPolicyId</td>
                    <td>@claim.PolicyHolderId</td>
                    <td>@claim.ClaimDate.ToShortDateString()</td>
                    <td>@claim.ClaimAmount</td>
                    <td>@claim.ClaimStatus</td>
                    <td>@claim.DispenseAmount</td>
                    <td>@claim.DocumentType</td>
                    <td>@claim.DocumentPath</td>
                    <td>@claim.HospitalId</td>
                <td>@isuredperson</td>
                <td>@insuranceName</td>
                </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int policyHolderId { get; set; }

    private ClaimDto claim;
    private string insuranceName;
    private string isuredperson;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            claim = await ClaimService.GetClaimsByPolicyHolderIdAsync(policyHolderId);

            if (claim != null)
            {
                // Fetch insured details
                var insured = await InsuredService.GetById(policyHolderId);
                isuredperson = insured.Name;


                var insuredPolicyId = await InsurancePolicy.GetById(claim.InsuredPolicyId);
                if (insuredPolicyId != null)
                {
                    var policyId = await PolicyService.GetById(insuredPolicyId.PolicyId);
                    if(policyId!=null)
                    {
                        var insuranceType = await InsuranceTypeService.GetById(policyId.InsuranceTypeId);
                        insuranceName = insuranceType?.InsuranceType;
                    }
                }
            }

            // if (claim != null)
            // {
                
            //     // Fetch insured policy details
            //     var insuredPolicy = await PolicyService.GetById(claim.InsuredPolicyId);
            //     if (insuredPolicy != null)
            //     {
            //         // Fetch policy details
            //         var policy = await PolicyService.GetById(insuredPolicy.PolicyId);
            //         if (policy != null)
            //         {
            //             // Fetch insurance type details
            //             var insuranceType = await InsuranceTypeService.GetById(policy.InsuranceTypeId);
            //             insuranceName = insuranceType?.InsuranceType;
            //         }
            //     }
            // }
        

        }
    catch (Exception ex)
        {
            Console.WriteLine($"Error fetching claims: {ex.Message}");
        }
    }
}



Error fetching claims: Response status code does not indicate success: 404 (Not Found).

Why are we getting error in console and not getting the data

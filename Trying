@page "/Claim/{policyHolderId:int}"
@using ClientApp.Services
@using InsuranceApi.DTOs


@inject IClaimDtoService ClaimService
@inject IInsuredDtoService InsuredService
@inject IPolicyDtoService PolicyService
@inject IInsuranceTypeDtoService InsuranceTypeService
@inject IInsuredPolicyDtoService InsurancePolicyService


<h3>Claim Status</h3>

@if (claim == null)
{
    <p>Loading claims...</p>
}


else
{
    <table class="table">
        <thead>
            <tr>
                <th>ClaimId</th>
                <th>Insurance ID</th>
                <th>Policy Holder ID</th>
                <th>Claim Date</th>
                <th>Claim Amount</th>
                <th>Claim Status</th>
                <th>Dispense Amount</th>
                <th>Dispense Type</th>
                <th>Dispense Path</th>
                <th>Hospital ID</th>
                <td>Name</td>
                <td>Plan</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@claim.ClaimId</td>
                <td>@claim.InsuredPolicyId</td>
                <td>@claim.PolicyHolderId</td>
                <td>@claim.ClaimDate.ToShortDateString()</td>
                <td>@claim.ClaimAmount</td>
                <td>@claim.ClaimStatus</td>
                <td>@claim.DispenseAmount</td>
                <td>@claim.DocumentType</td>
                <td>@claim.DocumentPath</td>
                <td>@claim.HospitalId</td>
                <td>@isuredperson</td>
                <td>@insuranceName</td>
            </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int policyHolderId { get; set; }

    private ClaimDto claim;
    private string insuranceName;
    private string isuredperson;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            claim = await ClaimService.GetClaimsByPolicyHolderIdAsync(policyHolderId);

            if (claim != null)
            {
                // Fetch insured details
                var insured = await InsuredService.GetById(policyHolderId);
                isuredperson = insured.Name;


                var insuredPolicyId = await InsurancePolicyService.GetById(claim.InsuredPolicyId);
                if (insuredPolicyId != null)
                {
                    var policyId = await PolicyService.GetById(insuredPolicyId.PolicyId);
                    if (policyId != null)
                    {
                        var insuranceType = await InsuranceTypeService.GetById(policyId.InsuranceTypeId);
                        insuranceName = insuranceType?.InsuranceType;
                    }
                }
            }


        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching claims: {ex.Message}");
        }
    }
}



using InsuranceApi.DTOs;
using System.Net.Http;
using System.Net.Http.Json;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Text.Json;

namespace ClientApp.Services
{
    public interface IClaimDtoService
    {
        Task Add(ClaimDto employee);
        Task DeleteById(int id);
        Task<List<ClaimDto>> GetAll();
        Task<ClaimDto> GetById(int id);
        Task Update(ClaimDto employee);
        Task<ClaimDto> GetClaimsByPolicyHolderIdAsync(int policyHolderId);

        //Task<string> GetClaimsByPolicyHolderIdAsync(int policyHolderId);
    }

    public class ClaimDtoService : IClaimDtoService
    {
        private readonly HttpClient _httpClient;

        public ClaimDtoService(HttpClient httpClient)
        {
            _httpClient = httpClient;
        }

        //public async Task<string> GetClaimsByPolicyHolderIdAsync(int policyHolderId)
        //{


        //    var response = await _httpClient.GetAsync($"Claim/{policyHolderId}");
        //    var json = await response.Content.ReadAsStringAsync();

        //    return json;

        //}

        




        public async Task<ClaimDto> GetClaimsByPolicyHolderIdAsync(int policyHolderId)
        {

            var response = await _httpClient.GetAsync($"Claim/{policyHolderId}");
            response.EnsureSuccessStatusCode();
            var json = await response.Content.ReadAsStringAsync();
            var claimsRes = JsonSerializer.Deserialize<ClaimDto>(json, new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            });
            Console.WriteLine($"Fetched {claimsRes}");
            return claimsRes;


        }




        public async Task Add(ClaimDto employee)
        {
            await _httpClient.PostAsJsonAsync("Claim", employee);
        }

        public async Task DeleteById(int id)
        {
            await _httpClient.DeleteAsync($"Claim/{id}");
        }

        public async Task<List<ClaimDto>> GetAll()
        {
            return await _httpClient.GetFromJsonAsync<List<ClaimDto>>("Claim");
        }

        public async Task<ClaimDto> GetById(int id)
        {
            return await _httpClient.GetFromJsonAsync<ClaimDto>($"Claim/{id}");
        }

        public async Task Update(ClaimDto employee)
        {
            await _httpClient.PutAsJsonAsync("Claim", employee);
        }

        Task<ClaimDto> IClaimDtoService.GetClaimsByPolicyHolderIdAsync(int policyHolderId)
        {
            throw new NotImplementedException();
        }
    }
}


@page "/userdashboard/{PolicyHolderId:int}"
@using ClientApp.Services
@using InsuranceApi.DTOs
@inject IPolicyHolderDtoService PolicyHolderService
@inject NavigationManager NavigateManager

<div class="user-header">
    <h2>Welcome, @UserName!</h2>
</div>

<div class="user-info">
    <div class="info-card">
        <h3>User Information</h3>
        <p><strong>Name:</strong> @UserName</p>
        <p><strong>Address:</strong> @Address</p>
        <p><strong>Phone:</strong> @Phone</p>
        <p><strong>Email:</strong> @Email</p>
        <p><strong>Status:</strong> @Status</p>
    </div>
</div>


<div class="claims-section">
    <div class="dropdown-header">
        <button @onclick="() => NavigateToClaimStatus(policyHolderId)"><h3>Your Policies</h3></button>
    </div>
</div>

<div class="claims-section">
    <div class="dropdown-header">
        <button @onclick="() => NavigateToClaimStatus(policyHolderId)"><h3>Your Claims</h3></button>
    </div>
</div>


@code {
    [Parameter]
    public int policyHolderId { get; set; }
    private string UserName;
    private string Address;
    private string Phone;
    private string Email;
    private int Status;
    private List<PolicyHolderDto> Policies;

    protected override async Task OnInitializedAsync()
    {
        // Example to fetch data dynamically based on user context or session

        // Fetch the policy holder data by ID
        var policyHolder = await PolicyHolderService.GetById(policyHolderId);


        if (policyHolder != null)
        {
            // Assign the fetched data to the fields
            UserName = policyHolder.Name;
            Address = policyHolder.Address;
            Phone = policyHolder.Phone;
            Email = policyHolder.Email;
            Status = policyHolder.Status;

            // Fetch all policies for this user
            Policies = await PolicyHolderService.GetAll();
        }
    }

    private void NavigateToClaimStatus(int policyHolderId)
    {
        NavigateManager.NavigateTo($"/Claim/{policyHolderId}");//Put 8
    }
}

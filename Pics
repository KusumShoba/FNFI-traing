@page "/Claim/{policyHolderId:int}"
@using ClientApp.Services
@using InsuranceApi.DTOs

@inject IClaimDtoService ClaimService

<h3>Claim Status</h3>

@if (claim == null)
{
    <p>Loading claims...</p>
}
@* else if (!claims.Any())
{
    <p>No claims found for the specified policy holder.</p>
} *@
else
{
    <table class="table">
        <thead>
            <tr>
                <th>ClaimId</th>
                <th>Insurance ID</th>
                <th>Policy Holder ID</th>
                <th>Claim Date</th>
                <th>Claim Amount</th>
                <th>Claim Status</th>
                <th>Dispense Amount</th>
                <th>Dispense Type</th>
                <th>Dispense Path</th>
                <th>Hospital ID</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                    <td>@claim.ClaimId</td>
                    <td>@claim.InsuredPolicyId</td>
                    <td>@claim.PolicyHolderId</td>
                    <td>@claim.ClaimDate.ToShortDateString()</td>
                    <td>@claim.ClaimAmount</td>
                    <td>@claim.ClaimStatus</td>
                    <td>@claim.DispenseAmount</td>
                    <td>@claim.DocumentType</td>
                    <td>@claim.DocumentPath</td>
                    <td>@claim.HospitalId</td>
                </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int policyHolderId { get; set; }

    private ClaimDto claim;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            claim = await ClaimService.GetClaimsByPolicyHolderIdAsync(policyHolderId);
            // Console.WriteLine($"Claims loaded{claims.Count}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching claims: {ex.Message}");
        }
    }
}

using System;
using System.Collections.Generic;

class AssignmentQuestion
{
    public class EmptyStringException : Exception
    {
        public EmptyStringException(string message) : base(message) { }
    }

    public class NullReferenceException : Exception
    {
        public NullReferenceException(string message) : base(message) { }
    }

    static void GetUniqueAndDuplicateWords(string input)
    {
        if (input == null)
        {
            throw new NullReferenceException("Input string is null.");
        }

        if (string.IsNullOrWhiteSpace(input))
        {
            throw new EmptyStringException("Input string is empty.");
        }

        var words = input.Split(new[] { ' ', ',', '.' }, StringSplitOptions.RemoveEmptyEntries);
        var wordCount = new Dictionary<string, int>();

        foreach (var word in words)
        {
            var lowerWord = word.ToLower();
            if (wordCount.ContainsKey(lowerWord))
            {
                wordCount[lowerWord]++;
            }
            else
            {
                wordCount[lowerWord] = 1;
            }
        }

        var uniqueWords = new List<string>();
        var duplicateWords = new List<string>();

        foreach (var kv in wordCount)
        {
            if (kv.Value == 1)
            {
                uniqueWords.Add(kv.Key);
            }
            else
            {
                duplicateWords.Add(kv.Key);
            }
        }

        Console.WriteLine("Unique: " + string.Join(", ", uniqueWords));
        Console.WriteLine("Duplicate: " + string.Join(", ", duplicateWords));
    }

    static void Main(string[] args)
    {
        var testCases = new List<string>
        {
            "Do not call me, let me call you",
            "I had coffee at a coffee shop yesterday during coffee break",
            null,
            ""
        };

        foreach (var testCase in testCases)
        {
            try
            {
                GetUniqueAndDuplicateWords(testCase);
            }
            catch (EmptyStringException ex)
            {
                Console.WriteLine($"EmptyStringException: {ex.Message}");
            }
            catch (NullReferenceException ex)
            {
                Console.WriteLine($"NullReferenceException: {ex.Message}");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Exception: {ex.Message}");
            }

            Console.WriteLine();
        }
    }
}

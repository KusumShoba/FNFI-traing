@page "/Claim/{policyHolderId:int}"
@using ClientApp.Services
@using InsuranceApi.DTOs
@using PolicyDbService.Services

@inject IClaimDtoService ClaimService

@inject IInsuredDtoService InsuredService

@inject IPolicyService PolicyService



<h3>Claim Status</h3>

@if (claim == null)
{
    <p>Loading claims...</p>
}


else
{
    <table class="table">
        <thead>
            <tr>
                <th>ClaimId</th>
                <th>Insurance ID</th>
                <th>Policy Holder ID</th>
                <th>Claim Date</th>
                <th>Claim Amount</th>
                <th>Claim Status</th>
                <th>Dispense Amount</th>
                <th>Dispense Type</th>
                <th>Dispense Path</th>
                <th>Hospital ID</th>
                <td>Insurance Name</td>
            </tr>
        </thead>
        <tbody>
            <tr>
                    <td>@claim.ClaimId</td>
                    <td>@claim.InsuredPolicyId</td>
                    <td>@claim.PolicyHolderId</td>
                    <td>@claim.ClaimDate.ToShortDateString()</td>
                    <td>@claim.ClaimAmount</td>
                    <td>@claim.ClaimStatus</td>
                    <td>@claim.DispenseAmount</td>
                    <td>@claim.DocumentType</td>
                    <td>@claim.DocumentPath</td>
                    <td>@claim.HospitalId</td>
                <td>@isuredperson</td>
                </tr>
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int policyHolderId { get; set; }

    private ClaimDto claim;
    private string insuranceName;
    private string isuredperson;


    protected override async Task OnInitializedAsync()
    {
        try
        {
            claim = await ClaimService.GetClaimsByPolicyHolderIdAsync(policyHolderId);
            
            if (claim != null)
            {
                // Fetch insured details
                var insured = await InsuredService.GetById(policyHolderId);
                 isuredperson = insured.Name;
            }

        }
    catch (Exception ex)
        {
            Console.WriteLine($"Error fetching claims: {ex.Message}");
        }
    }
}




Take help of Logic:
 <tbody>
     @if (insuredPolicies != null && insuredPolicies.Any())
     {
         var displayedPolicyIds = new HashSet<int>();

         @foreach (var insuredPolicy in insuredPolicies)
         {
             var policy = policies.FirstOrDefault(p => p.PolicyId == insuredPolicy.PolicyId);

             if (policy != null && !displayedPolicyIds.Contains(policy.PolicyId))
             {
                 displayedPolicyIds.Add(policy.PolicyId); // Mark this policy as displayed

                 var daysLeft = (policy.EndDate - DateTime.Today).Days;
                 var insuranceType = InsuranceType.FirstOrDefault(it => it.InsuranceId == policy.InsuranceTypeId);
                 var daysSinceStart = (DateTime.Today - policy.StartDate).Days;

                 <tr class="@GetRowClass(policy.EndDate)">
                     <td>@insuredPolicy.PolicyId</td>
                     <td>@insuredPolicy.InsuredPolicyId</td>
                     <td>@insuranceType?.InsuranceType</td>




I want to connect:-
1.From Claim Table ==>(take) Insured Policy Id Go to
2.Insured Policy Table (from Insured Policy Id) ==> (take) Policy Id
3.Policy Table (from Policy Id) ==> (take) Insurance Type Id
4.Insurance Type Table (from Policy Id) ==> (take) Name

// Example Repo Class
public class MyRepo
{
    private readonly MyDbContext _context;

    public MyRepo(MyDbContext context)
    {
        _context = context;
    }

    public async Task<MyEntity> GetByIdAsync(int id)
    {
        return await _context.MyEntities.FindAsync(id);
    }

    // Other CRUD operations...
}

// Unit Test using Moq and xUnit
public class MyRepoTests
{
    private readonly Mock<MyDbContext> _mockContext;
    private readonly Mock<DbSet<MyEntity>> _mockSet;
    private readonly MyRepo _repo;

    public MyRepoTests()
    {
        _mockContext = new Mock<MyDbContext>();
        _mockSet = new Mock<DbSet<MyEntity>>();
        _repo = new MyRepo(_mockContext.Object);
    }

    [Fact]
    public async Task GetByIdAsync_ReturnsEntity_WhenEntityExists()
    {
        // Arrange
        var entity = new MyEntity { Id = 1 };
        _mockSet.Setup(m => m.FindAsync(1)).ReturnsAsync(entity);
        _mockContext.Setup(c => c.MyEntities).Returns(_mockSet.Object);

        // Act
        var result = await _repo.GetByIdAsync(1);

        // Assert
        Assert.Equal(entity, result);
    }

    // Other test methods...
}




Implement above in m9:


using InsuranceApi.Data;
using InsuranceApi.Services;
using Microsoft.EntityFrameworkCore;
using Moq;
using System.Net.Sockets;

namespace InsuranceTestMock
{
    [TestClass]
    public class PolicyHolderServiceTest
    {
        private Mock<DbSet<PolicyHolder>> _mockDbSet;
        private Mock<FnfProjectContext> _mockContext;
        private PolicyHolderService _service;

        [TestInitialize]
        public void SetUp()
        {
            _mockDbSet = new Mock<DbSet<PolicyHolder>>();
            var data = new List<PolicyHolder>
            {
                new PolicyHolder { PolicyHolderId = 1, Name = "John Doe", Address = "123 Main St", Email = "john@example.com", PasswordHash = "hash", Phone = "1234567890", Status = 1 },
                new PolicyHolder { PolicyHolderId = 2, Name = "Jane Doe", Address = "456 Elm St", Email = "jane@example.com", PasswordHash = "hash", Phone = "0987654321", Status = 0 }
            }.AsQueryable();

            // Set up the _mockDbSet to behave like a DbSet
            _mockDbSet.As<IQueryable<PolicyHolder>>().Setup(m => m.Provider).Returns(data.Provider);
            _mockDbSet.As<IQueryable<PolicyHolder>>().Setup(m => m.Expression).Returns(data.Expression);
            _mockDbSet.As<IQueryable<PolicyHolder>>().Setup(m => m.ElementType).Returns(data.ElementType);
            _mockDbSet.As<IQueryable<PolicyHolder>>().Setup(m => m.GetEnumerator()).Returns(data.GetEnumerator());

            _mockContext = new Mock<FnfProjectContext>();
            _mockContext.Setup(c => c.PolicyHolders).Returns(_mockDbSet.Object);
            
            //_mockDbSet.Setup(set => set.FirstOrDefault(It.IsAny<PolicyHolder>())).Returns((int id) => data.FirstOrDefault(d => d.PolicyHolderId == id));
            //_mockDbSet.Setup(m => m.FindAsync(It.IsAny<int>())).ReturnsAsync((int id) => data.FirstOrDefault(p => p.PolicyHolderId == id));


        }
        [TestMethod]
        public async Task ShouldGetAllPolicies()
        {
            //Arrange
            _service = new PolicyHolderService(_mockContext.Object);

            //Act
            var data = await _service.GetAll();

            //Assert
            Assert.AreEqual(2, data.Count);
        }

        [TestMethod]
        public async Task ShouldGetPolicyById()
        {
        // Arrange
        _service = new PolicyHolderService(_mockContext.Object);

        // Act
        //var policyHolderId = 1;
        var result = await _service.GetById(1);

        // Assert
        Assert.IsNotNull(result);
        Assert.AreEqual(1, result.PolicyHolderId);
    }

}
}

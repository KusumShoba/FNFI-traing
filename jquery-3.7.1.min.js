JavaScript and MVC Test
I want a Personal Expense Manager Software developed in Javascript that shall store all expenses into a database. This is a Single User application, so there is no scope of Authentication here. The User interface is developed using Javascript and jQuery. 
The data will be stored in the database using an MVC Controller that has APIs to get the expenses and add Expenses. U must use EF Core for data base interaction. U can either use CF approach or the DBF approach. 
 
The Application has the following use cases:
1. Add New Expense to database
2. Find Expense based on Date
3. Find all Expenses based on description. 
4. Find all Expenses by Month.   




Eg.
using System.ComponentModel.DataAnnotations.Schema;
using System.ComponentModel.DataAnnotations;

namespace SampleMvcApp.Models
{
    [Table("Movie")]
    public class Movie
    {
        [Key]
        public int MovieId { get; set; }

        public string MovieName { get; set; } = string.Empty;

        public int MovieRating { get; set; }
        public string MovieDescription { get; set; } = string.Empty;

        public string MovieActor { get; set; } = string.Empty;

        public string MovieDirector { get; set; } = string.Empty;

    }

}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ajax Calls using jQuery</title>
    <link href="
https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
          rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script>
        const url = "MovieDb/AllMovies"
        function createRow(movie) {
            const row = `<tr>
                        <td>${movie.movieName}</td>
                        <td>${movie.movieDescription}</td>
                        <td>${movie.movieDirector}</td>
                        <td>${movie.movieActor}</td>
                        <td>${movie.movieRating}</td>
                                <td>
                                            <a href="#" class="btn btn-secondary" onClick="OnEdit(${movie.movieName})">Edit
                                </td>
                                        </tr>`
            
            return row;
        }
        function onGetRecordsSuccess(result) {
            debugger;
            console.log(result);
            $("table tbody tr").remove();
            $.each(result, function (index, value) {
                const row = createRow(value);
                $("table tbody").append(row);
            })
        }
        function showRecords() {
            $.get(url, onGetRecordsSuccess);
        }
        function findRecords() {
            const title = $("#txtSearch").val();
            const findUrl = `MovieDb/Find?title=${title}`
            $.get(findUrl, onGetRecordsSuccess);
        
        }
        function addRecord() {
           const url="MovieDb/AddMovie"
            let movie = {
                "movieActor"
                    :
                    "Tom Holland",
        "movieDescription"
                    :
                    "In a magical world full of technological advances, elven brothers Ian and Barley Lightfoot set out on an adventure to resurrect their late father for a day.",
        "movieDirector"
                    :
                    "Dan Scanlon",
       
        "movieName"
                    :
                    "onward",
        "movieRating"
                    :
                    7
            }
            $.post(url, movie, (res) => { 
                alert(res);
            })
        }
        function deleteRecords() {
            alert("delete")
        }
        function init() {
            $("#btnShow").click(showRecords);
            $("#btnFind").click(findRecords);
            $("#btnAdd").click(addRecord);
            $("#btnDelete").click(deleteRecords);
        }
        $(document).ready(init);
    </script>
</head>
<body>
    <nav class="navbar bg-light">
        <button id="btnShow" class="btn btn-info m-4">Show Records</button>
        <button id="btnFind" class="btn btn-primary m-4">Find Records</button>
        <button id="btnAdd" class="btn btn-secondary m-4">Add Records</button>
        <button id="btnDelete" class="btn btn-warning m-4">Delete Records</button>
    </nav>
    <h1>Purpose of this App</h1>
    <hr>
    <div>
        <p>This App will call the APIs of the MVC Controller and work with the data</p>
    </div>
    <div class="container-fluid">
        <div class="row">
            <div class="col-md-11">
                <input type="search" id="txtSearch" placeholder="SeachMovie"
                    class="form-control" onchange="findRecords()" />
                <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>Title</th>
                            <th>Description</th>
                            <th>Director</th>
                            <th>Actors</th>
                            <th>Ratings</th>
                            <th>Options</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</body>
</html>



using Microsoft.AspNetCore.Mvc;
using SampleMvcApp.Models;

namespace SampleMvcApp.Controllers
{
    public class MovieDbController : Controller
    {
        private readonly FnfTraingDbContext _DbContext;
        public MovieDbController(FnfTraingDbContext dbContext)
        {
            _DbContext = dbContext;
        }

        public JsonResult AllMovies()
        {
            //var empList=_DbContext.Employees.ToList();
            //return Json(empList);
            var movList = _DbContext.Movies.ToList();
            return Json(movList);
        }

        public JsonResult Find(string title)
        {
            var mov = _DbContext.Movies.Where(m => m.MovieName.Contains(title)).ToList();  
            return Json(mov);
        }

        [HttpPost]

        public string AddMovie(Movie movie)
        {
            _DbContext.Movies.Add(movie);
            _DbContext.SaveChanges();
            return "Movies saved to the database";

        }

        [HttpPost]

        public string UpdateMovie(Movie movie)
        {
            var found = _DbContext.Movies.Where(m=> m.MovieId == movie.MovieId).FirstOrDefault();
            if (found == null)
            {
                throw new Exception("No data found to add");
            }
            found.MovieName = movie.MovieName;
            found.MovieActor = movie.MovieActor;
            found.MovieDescription = movie.MovieDescription;
            found.MovieDirector = movie.MovieDirector;
            _DbContext.SaveChanges();
            return "Movie updated to the database";

        }
    }
}

using System;
using System.Collections.Generic;

public class Program
{
    // Reference sentence to be used for encoding
    private static readonly string referenceSentence = "The quick and brown fox jumps over the Lazy Dog".ToLower();
    
    public static string EncodeString(string inputString)
    {
        if (inputString == null)
        {
            throw new NullReferenceException("Input string cannot be null.");
        }

        if (inputString == string.Empty)
        {
            throw new ArgumentException("Input string cannot be empty.");
        }

        // Convert input string to lowercase to make it case-insensitive
        inputString = inputString.ToLower();

        // Split the input into words based on space
        string[] words = inputString.Split(' ');

        List<string> encodedChars = new List<string>();

        // Iterate through each word and encode the characters
        for (int wordIndex = 0; wordIndex < words.Length; wordIndex++)
        {
            string word = words[wordIndex];

            for (int charIndex = 0; charIndex < word.Length; charIndex++)
            {
                char currentChar = word[charIndex];

                // Find the position of the current character in the referenceSentence
                string[] refWords = referenceSentence.Split(' ');

                bool found = false;
                for (int refWordIndex = 0; refWordIndex < refWords.Length && !found; refWordIndex++)
                {
                    string refWord = refWords[refWordIndex];

                    int refCharIndex = refWord.IndexOf(currentChar);
                    if (refCharIndex != -1)
                    {
                        // Generate the code by combining refWordIndex and refCharIndex
                        string code = (refWordIndex + 1).ToString("00") + (refCharIndex + 1).ToString("00");
                        encodedChars.Add(code);
                        found = true;
                    }
                }
            }

            // Replace space with hyphen between words
            if (wordIndex < words.Length - 1)
            {
                encodedChars.Add("-");
            }
        }

        // Join the encoded characters with comma
        string encodedString = string.Join(",", encodedChars);

        return encodedString;
    }

    public static void Main(string[] args)
    {
        string[] testInputs = {
            "bangalore",
            "mindtree",
            "TTG",
            "Global Village",
            "West campus",
            "",
            null
        };

        foreach (string input in testInputs)
        {
            try
            {
                string encodedOutput = EncodeString(input);
                Console.WriteLine($"Input: {input}\nOutput: {encodedOutput}\n");
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Input: {input}\nException: {ex.GetType().Name}\n");
            }
        }
    }
}

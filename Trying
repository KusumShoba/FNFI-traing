using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text.Json;

namespace LibraryOfSennor
{
    public class Book
    {
        public string Title { get; set; }
        public string Author { get; set; }
        public string ISBN { get; set; } // Unique identifier for each book
    }

    public class Library
    {
        private const string FilePath = "library.json";
        private List<Book> books;

        public Library()
        {
            LoadBooks();
        }

        private void LoadBooks()
        {
            if (File.Exists(FilePath))
            {
                var json = File.ReadAllText(FilePath);
                books = JsonSerializer.Deserialize<List<Book>>(json) ?? new List<Book>();
            }
            else
            {
                books = new List<Book>();
            }
        }

        private void SaveBooks()
        {
            var json = JsonSerializer.Serialize(books, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(FilePath, json);
        }

        public void AddBook(Book book)
        {
            if (books.Any(b => b.ISBN == book.ISBN))
            {
                throw new Exception("Book with the same ISBN already exists.");
            }

            books.Add(book);
            SaveBooks();
        }

        public List<Book> SearchBooks(string query, bool searchByAuthor = false)
        {
            return searchByAuthor
                ? books.Where(b => b.Author.Contains(query, StringComparison.OrdinalIgnoreCase)).ToList()
                : books.Where(b => b.Title.Contains(query, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        public void RemoveBook(string isbn)
        {
            var book = books.FirstOrDefault(b => b.ISBN == isbn);
            if (book == null)
            {
                throw new Exception("Book not found.");
            }

            books.Remove(book);
            SaveBooks();
        }

        public void UpdateBook(string isbn, Book updatedBook)
        {
            var book = books.FirstOrDefault(b => b.ISBN == isbn);
            if (book == null)
            {
                throw new Exception("Book not found.");
            }

            book.Title = updatedBook.Title;
            book.Author = updatedBook.Author;
            SaveBooks();
        }

        public void DisplayAllBooks()
        {
            foreach (var book in books)
            {
                Console.WriteLine($"Title: {book.Title}, Author: {book.Author}, ISBN: {book.ISBN}");
            }
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            var library = new Library();
            bool exit = false;

            while (!exit)
            {
                try
                {
                    Console.WriteLine("Library of Sennor Menu:");
                    Console.WriteLine("1. Add Book");
                    Console.WriteLine("2. Search Books by Title");
                    Console.WriteLine("3. Search Books by Author");
                    Console.WriteLine("4. Remove Book");
                    Console.WriteLine("5. Update Book");
                    Console.WriteLine("6. Display All Books");
                    Console.WriteLine("7. Exit");
                    Console.Write("Enter your choice: ");
                    var choice = Console.ReadLine();

                    switch (choice)
                    {
                        case "1":
                            AddBook(library);
                            break;
                        case "2":
                            SearchBooks(library, searchByAuthor: false);
                            break;
                        case "3":
                            SearchBooks(library, searchByAuthor: true);
                            break;
                        case "4":
                            RemoveBook(library);
                            break;
                        case "5":
                            UpdateBook(library);
                            break;
                        case "6":
                            library.DisplayAllBooks();
                            break;
                        case "7":
                            exit = true;
                            break;
                        default:
                            Console.WriteLine("Invalid choice. Please try again.");
                            break;
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error: {ex.Message}");
                }
            }
        }

        static void AddBook(Library library)
        {
            Console.Write("Enter book title: ");
            var title = Console.ReadLine();
            Console.Write("Enter book author: ");
            var author = Console.ReadLine();
            Console.Write("Enter book ISBN: ");
            var isbn = Console.ReadLine();

            var book = new Book { Title = title, Author = author, ISBN = isbn };
            library.AddBook(book);
            Console.WriteLine("Book added successfully.");
        }

        static void SearchBooks(Library library, bool searchByAuthor)
        {
            Console.Write("Enter search query: ");
            var query = Console.ReadLine();
            var results = library.SearchBooks(query, searchByAuthor);

            if (results.Any())
            {
                Console.WriteLine("Search Results:");
                foreach (var book in results)
                {
                    Console.WriteLine($"Title: {book.Title}, Author: {book.Author}, ISBN: {book.ISBN}");
                }
            }
            else
            {
                Console.WriteLine("No books found.");
            }
        }

        static void RemoveBook(Library library)
        {
            Console.Write("Enter book ISBN to remove: ");
            var isbn = Console.ReadLine();
            library.RemoveBook(isbn);
            Console.WriteLine("Book removed successfully.");
        }

        static void UpdateBook(Library library)
        {
            Console.Write("Enter book ISBN to update: ");
            var isbn = Console.ReadLine();

            Console.Write("Enter new book title: ");
            var title = Console.ReadLine();
            Console.Write("Enter new book author: ");
            var author = Console.ReadLine();

            var updatedBook = new Book { Title = title, Author = author, ISBN = isbn };
            library.UpdateBook(isbn, updatedBook);
            Console.WriteLine("Book updated successfully.");
        }
    }
}

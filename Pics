using InsuranceApi.Data;
using InsuranceApi.Services;
using Microsoft.EntityFrameworkCore;
using Moq;
using System.Net.Sockets;

namespace InsuranceTestMock
{
    [TestClass]
    public class PolicyHolderServiceTest
    {
        private Mock<DbSet<PolicyHolder>> _mockDbSet;
        private Mock<FnfProjectContext> _mockContext;
        private PolicyHolderService _service;

        [TestInitialize]
        public void SetUp()
        {
            _mockDbSet = new Mock<DbSet<PolicyHolder>>();
            var data = new List<PolicyHolder>
            {
                new PolicyHolder { PolicyHolderId = 1, Name = "John Doe", Address = "123 Main St", Email = "john@example.com", PasswordHash = "hash", Phone = "1234567890", Status = 1 },
                new PolicyHolder { PolicyHolderId = 2, Name = "Jane Doe", Address = "456 Elm St", Email = "jane@example.com", PasswordHash = "hash", Phone = "0987654321", Status = 0 }
            }.AsQueryable();

            // Set up the _mockDbSet to behave like a DbSet
            _mockDbSet.As<IQueryable<PolicyHolder>>().Setup(m => m.Provider).Returns(data.Provider);
            _mockDbSet.As<IQueryable<PolicyHolder>>().Setup(m => m.Expression).Returns(data.Expression);
            _mockDbSet.As<IQueryable<PolicyHolder>>().Setup(m => m.ElementType).Returns(data.ElementType);
            _mockDbSet.As<IQueryable<PolicyHolder>>().Setup(m => m.GetEnumerator()).Returns(data.GetEnumerator());

            _mockContext = new Mock<FnfProjectContext>();
            _mockContext.Setup(c => c.PolicyHolders).Returns(_mockDbSet.Object);
        }
        [TestMethod]
        public async Task ShouldGetAllPolicies()
        {
            //Arrange
            _service = new PolicyHolderService(_mockContext.Object);

            //Act
            var data = await _service.GetAll();

            //Assert
            Assert.AreEqual(2, data.Count);
        }
    }
}
